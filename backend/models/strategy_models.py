from sqlalchemy import Column, String, Float, Integer, DateTime, JSON, Boolean, Enum, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
import enum

from utils.db.postgres import Base


class StrategyType(enum.Enum):
    """Types of investment strategies."""
    LONG_ONLY = "long_only"
    LONG_SHORT = "long_short"
    MARKET_NEUTRAL = "market_neutral"
    MOMENTUM = "momentum"
    VALUE = "value"
    GROWTH = "growth"
    MEAN_REVERSION = "mean_reversion"
    PAIRS_TRADING = "pairs_trading"


class RiskLevel(enum.Enum):
    """Risk levels for strategies."""
    CONSERVATIVE = "conservative"
    MODERATE = "moderate"
    AGGRESSIVE = "aggressive"


class StrategyStatus(enum.Enum):
    """Strategy status."""
    DRAFT = "draft"
    ACTIVE = "active"
    PAUSED = "paused"
    ARCHIVED = "archived"


class Strategy(Base):
    """Investment strategy model."""
    __tablename__ = "strategies_v2"
    
    id = Column(String, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(String)
    
    # Strategy configuration - use Enum with values_callable
    strategy_type = Column(
        Enum(StrategyType, values_callable=lambda obj: [e.value for e in obj]),
        nullable=False
    )
    risk_level = Column(
        Enum(RiskLevel, values_callable=lambda obj: [e.value for e in obj]),
        default=RiskLevel.MODERATE
    )
    status = Column(
        Enum(StrategyStatus, values_callable=lambda obj: [e.value for e in obj]),
        default=StrategyStatus.DRAFT
    )
    
    # Investment universe
    instruments = Column(JSON)  # List of symbols
    sectors = Column(JSON)  # Target sectors
    market_cap_range = Column(JSON)  # {"min": 1000000000, "max": 10000000000}
    
    # Strategy rules
    entry_rules = Column(JSON)  # Conditions to enter positions
    exit_rules = Column(JSON)   # Conditions to exit positions
    position_sizing = Column(JSON)  # How to size positions
    
    # Risk management
    max_positions = Column(Integer, default=10)
    max_position_size = Column(Float, default=0.1)  # 10% max per position
    stop_loss = Column(Float)  # Percentage stop loss
    take_profit = Column(Float)  # Percentage take profit
    max_drawdown_limit = Column(Float, default=0.2)  # 20% max drawdown
    
    # Performance targets
    target_return = Column(Float)  # Annual target return
    target_volatility = Column(Float)  # Target volatility
    target_sharpe = Column(Float)  # Target Sharpe ratio
    
    # Metadata
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, onupdate=func.now())
    created_by = Column(String)  # User or AI agent
    
    # Relationships
    research_id = Column(String, ForeignKey("research.id"))
    allocations = relationship("StrategyAllocation", back_populates="strategy")
    signals = relationship("TradingSignal", back_populates="strategy")


class StrategyAllocation(Base):
    """Portfolio allocation for a strategy."""
    __tablename__ = "strategy_allocations"
    
    id = Column(Integer, primary_key=True)
    strategy_id = Column(String, ForeignKey("strategies_v2.id"))
    
    # Allocation details
    symbol = Column(String, nullable=False)
    allocation_percent = Column(Float, nullable=False)  # Target allocation
    
    # Constraints
    min_allocation = Column(Float, default=0.01)  # 1% minimum
    max_allocation = Column(Float, default=0.25)  # 25% maximum
    
    # Rebalancing
    rebalance_trigger = Column(Float, default=0.05)  # 5% deviation triggers rebalance
    
    created_at = Column(DateTime, server_default=func.now())
    
    # Relationships
    strategy = relationship("Strategy", back_populates="allocations")


class TradingSignal(Base):
    """Trading signals generated by strategies."""
    __tablename__ = "trading_signals"
    
    id = Column(Integer, primary_key=True)
    strategy_id = Column(String, ForeignKey("strategies_v2.id"))
    
    # Signal details
    symbol = Column(String, nullable=False)
    signal_type = Column(String)  # 'buy', 'sell', 'hold'
    strength = Column(Float)  # Signal strength 0-1
    
    # Price levels
    current_price = Column(Float)
    target_price = Column(Float)
    stop_price = Column(Float)
    
    # Reasoning
    reasons = Column(JSON)  # List of reasons for the signal
    confidence = Column(Float)  # Confidence level 0-1
    
    # Status
    is_active = Column(Boolean, default=True)
    executed = Column(Boolean, default=False)
    
    created_at = Column(DateTime, server_default=func.now())
    expires_at = Column(DateTime)
    
    # Relationships
    strategy = relationship("Strategy", back_populates="signals")